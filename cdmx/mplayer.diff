Index: Makefile
===================================================================
--- Makefile	(revision 31028)
+++ Makefile	(working copy)
@@ -618,6 +618,7 @@
 SRCS_MPLAYER-$(LIBMENU_DVBIN) += libmenu/menu_dvbin.c
 SRCS_MPLAYER-$(LIRC)          += input/lirc.c
 SRCS_MPLAYER-$(MD5SUM)        += libvo/vo_md5sum.c
+SRCS_MPLAYER-$(DMX)           += libvo/vo_dmx.c
 SRCS_MPLAYER-$(MGA)           += libvo/vo_mga.c
 SRCS_MPLAYER-$(NAS)           += libao2/ao_nas.c
 SRCS_MPLAYER-$(OPENAL)        += libao2/ao_openal.c
Index: libvo/vo_dmx.c
===================================================================
--- libvo/vo_dmx.c	(revision 0)
+++ libvo/vo_dmx.c	(revision 0)
@@ -0,0 +1,202 @@
+/*
+ * DMX Plugin that interacts with cDMX.
+ *
+ * This file is part of MPlayer.
+ *
+ * MPlayer is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * MPlayer is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with MPlayer; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ */
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <errno.h>
+#include <math.h>
+
+#include "config.h"
+#include "mp_msg.h"
+#include "help_mp.h"
+#include "video_out.h"
+#include "video_out_internal.h"
+#include "libswscale/swscale.h"
+#include "libmpcodecs/vf_scale.h"
+
+#include <cdmx/plugin.h>
+
+static const vo_info_t info =
+{
+	"DMX Output",
+	"dmx",
+	"Michael Axiak <axiak@mit.edu>",
+	""
+};
+
+const LIBVO_EXTERN (dmx)
+
+static int img_height;
+static int img_width;
+
+/* DMX stuff */
+static LocalData *s;
+
+/* used for the sws */
+static struct SwsContext *sws=NULL;
+static uint8_t * image[MP_MAX_PLANES];
+static int *image_stride = NULL;
+static uint32_t imgformat;
+
+
+static int config(uint32_t width, uint32_t height, uint32_t d_width, uint32_t d_height, uint32_t flags, char *title, uint32_t format)
+{
+    mp_msg(MSGT_VO, MSGL_V, "DMX: Configure entered.\n");
+
+    img_width = width;
+    img_height = height;
+
+    imgformat = format;
+
+    if(sws) sws_freeContext(sws);
+    sws = sws_getContextFromCmdLine(width, height, imgformat,
+                                    s->layer->width, s->layer->height,
+                                    IMGFMT_RGB24);
+
+
+    if (!image_stride) {
+        image_stride = av_mallocz(sizeof(int) * MP_MAX_PLANES);
+    }
+    image_stride[0] = 3 * s->layer->width;
+    image_stride[0] += (8 - (image_stride[0] % 8));
+
+    if (image[0]) av_free(image[0]);
+    image[0] = (uint8_t *)av_malloc(image_stride[0] * s->layer->height);
+
+    return 0;
+}
+
+static void draw_osd(void)
+{
+}
+
+static void flip_page (void)
+{
+    serverdata_commitlayer(s);
+    return;
+}
+
+
+static int
+draw_slice(uint8_t *src[], int stride[],
+	    int w, int h, int x, int y)
+{
+    uint8_t * rgbdata;
+    int baseidx;
+
+    int dx1 = (x * s->layer->width / img_width);
+    int dy1 = (y * s->layer->height / img_height);
+    int dx2 = ((x+w) * s->layer->width / img_width);
+    int dy2 = ((y+h) * s->layer->height / img_height);
+
+    sws_scale(sws, (const uint8_t * const *)src, stride, y, h, image, image_stride);
+    rgbdata = image[0];
+
+    for (int c = dx1; c < dx2; c++) {
+        for (int r = dy1; r < dy2; r++) {
+            baseidx = 3* c + image_stride[0] * r;
+            rgbpixel_setintvalue(
+                                 colorlayer_getpixel(s->layer, c,
+                                                     s->layer->height - r - 1),
+                                 rgbdata[baseidx],
+                                 rgbdata[baseidx + 1],
+                                 rgbdata[baseidx + 2],
+                                 255);
+        }
+    }
+    return 0;
+}
+
+
+static int draw_frame(uint8_t * src[])
+{
+    int stride[MP_MAX_PLANES] = {0};
+
+    switch(imgformat) {
+    case IMGFMT_BGR15:
+    case IMGFMT_BGR16:
+        stride[0] = img_width*2;
+        break;
+    case IMGFMT_IYU2:
+    case IMGFMT_BGR24:
+        stride[0] = img_width*3;
+        break;
+    case IMGFMT_BGR32:
+        stride[0] = img_width*4;
+        break;
+    }
+
+    return draw_slice(src, stride, img_width, img_height, 0, 0);
+}
+
+
+static int query_format(uint32_t format)
+{
+    switch(format){
+	case IMGFMT_YV12:
+	case IMGFMT_I420:
+	case IMGFMT_IYUV:
+	case IMGFMT_IYU2:
+	case IMGFMT_BGR32:
+	case IMGFMT_BGR24:
+	case IMGFMT_BGR16:
+	case IMGFMT_BGR15:
+	case IMGFMT_RGB32:
+	case IMGFMT_RGB24:
+	case IMGFMT_Y8:
+	case IMGFMT_Y800:
+	    return VFCAP_CSP_SUPPORTED | VFCAP_SWSCALE;
+    }
+    return 0;
+}
+
+static void uninit(void)
+{
+    if(sws) sws_freeContext(sws);
+    if (image[0]) av_free(image[0]);
+    if (image_stride) av_free(image_stride);
+}
+
+
+static void check_events(void)
+{
+}
+
+
+static int preinit(const char *arg)
+{
+    s = plugin_register("vo_dmx", 155);
+    if (!s) {
+        mp_msg(MSGT_VO, MSGL_ERR, "vo_dmx: Couldn't initialize DMX system\n");
+        return -1;
+    }
+    return 0;
+}
+
+
+static int control(uint32_t request, void *data, ...)
+{
+  switch (request) {
+      case VOCTRL_QUERY_FORMAT:
+          return query_format(*((uint32_t*)data));
+  }
+  return VO_NOTIMPL;
+}
Index: libvo/video_out.c
===================================================================
--- libvo/video_out.c	(revision 31028)
+++ libvo/video_out.c	(working copy)
@@ -139,6 +139,7 @@
 extern const vo_functions_t video_out_quartz;
 extern const vo_functions_t video_out_pnm;
 extern const vo_functions_t video_out_md5sum;
+extern const vo_functions_t video_out_dmx;
 
 const vo_functions_t* const video_out_drivers[] =
 {
@@ -287,6 +288,9 @@
 #ifdef CONFIG_MD5SUM
         &video_out_md5sum,
 #endif
+#ifdef CONFIG_DMX
+        &video_out_dmx,
+#endif
         NULL
 };
 
Index: configure
===================================================================
--- configure	(revision 31028)
+++ configure	(working copy)
@@ -375,6 +375,7 @@
   --enable-ggi             enable GGI video output [autodetect]
   --enable-ggiwmh          enable GGI libggiwmh extension [autodetect]
   --enable-direct3d        enable Direct3D video output [autodetect]
+  --enable-dmx             enable DMX video output [autodetect]
   --enable-directx         enable DirectX video output [autodetect]
   --enable-dxr2            enable DXR2 video output [autodetect]
   --enable-dxr3            enable DXR3/H+ video output [autodetect]
@@ -581,6 +582,7 @@
 _sdl=auto
 _kva=auto
 _direct3d=auto
+_dmx=auto
 _directx=auto
 _win32waveout=auto
 _nas=auto
@@ -926,6 +928,8 @@
   --disable-kva)        _kva=no         ;;
   --enable-direct3d)    _direct3d=yes   ;;
   --disable-direct3d)   _direct3d=no    ;;
+  --enable-dmx)         _dmx=yes        ;;
+  --disable-dmx)        _dmx=no         ;;
   --enable-directx)     _directx=yes    ;;
   --disable-directx)    _directx=no     ;;
   --enable-win32waveout)  _win32waveout=yes ;;
@@ -4314,6 +4318,32 @@
 echores "$_bl"
 
 
+echocheck "dmx"
+if test "$_dmx" = yes ; then
+    def_dmx="#define CONFIG_DMX 1"
+    _ld_dmx="-ldmxplugin"
+    libs_mplayer="$libs_mplayer $_ld_dmx"
+    _vomodules="dmx $_vomodules"
+fi
+if test "$_dmx" = auto ; then
+    _dmx=no
+  cat > $TMPC <<EOF
+#include <cdmx/plugin.h>
+int main(void) { return 0; }
+EOF
+
+  cc_check -ldmxplugin && _dmx=yes && \
+      def_dmx="#define CONFIG_DMX 1" && \
+      libs_mplayer="$libs_mplayer -ldmxplugin" && \ 
+  _vomodules="dmx $_vomodules"
+  
+  cc_check $_ld_tmp && libs_mplayer="$libs_mplayer $_ld_tmp" \
+      && _x11=yes && break
+
+fi
+echores "$_dmx"
+
+
 echocheck "DirectFB"
 if test "$_directfb" = auto ; then
   _directfb=no
@@ -8520,6 +8550,7 @@
 DIRECT3D = $_direct3d
 DIRECTFB = $_directfb
 DIRECTX = $_directx
+DMX = $_dmx
 DVBIN = $_dvbin
 DVDNAV = $_dvdnav
 DVDNAV_INTERNAL = $dvdnav_internal
@@ -9090,6 +9121,7 @@
 $def_jpeg
 $def_kva
 $def_md5sum
+$def_dmx
 $def_mga
 $def_mng
 $def_png
